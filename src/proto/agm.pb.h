// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/agm.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fagm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fagm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fagm_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fagm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fagm_2eproto;
class AGM;
struct AGMDefaultTypeInternal;
extern AGMDefaultTypeInternal _AGM_default_instance_;
class MapLayer;
struct MapLayerDefaultTypeInternal;
extern MapLayerDefaultTypeInternal _MapLayer_default_instance_;
class TileType;
struct TileTypeDefaultTypeInternal;
extern TileTypeDefaultTypeInternal _TileType_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TileType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TileType) */ {
 public:
  inline TileType() : TileType(nullptr) {}
  ~TileType() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TileType(::google::protobuf::internal::ConstantInitialized);

  inline TileType(const TileType& from)
      : TileType(nullptr, from) {}
  TileType(TileType&& from) noexcept
    : TileType() {
    *this = ::std::move(from);
  }

  inline TileType& operator=(const TileType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileType& operator=(TileType&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileType& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileType* internal_default_instance() {
    return reinterpret_cast<const TileType*>(
               &_TileType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TileType& a, TileType& b) {
    a.Swap(&b);
  }
  inline void Swap(TileType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileType* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TileType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TileType& from) {
    TileType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TileType* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TileType";
  }
  protected:
  explicit TileType(::google::protobuf::Arena* arena);
  TileType(::google::protobuf::Arena* arena, const TileType& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTitleFieldNumber = 2,
    kGraphicIndexFieldNumber = 3,
    kSolidFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // int32 graphicIndex = 3;
  void clear_graphicindex() ;
  ::int32_t graphicindex() const;
  void set_graphicindex(::int32_t value);

  private:
  ::int32_t _internal_graphicindex() const;
  void _internal_set_graphicindex(::int32_t value);

  public:
  // bool solid = 4;
  void clear_solid() ;
  bool solid() const;
  void set_solid(bool value);

  private:
  bool _internal_solid() const;
  void _internal_set_solid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:TileType)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::int32_t graphicindex_;
    bool solid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fagm_2eproto;
};// -------------------------------------------------------------------

class MapLayer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapLayer) */ {
 public:
  inline MapLayer() : MapLayer(nullptr) {}
  ~MapLayer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapLayer(::google::protobuf::internal::ConstantInitialized);

  inline MapLayer(const MapLayer& from)
      : MapLayer(nullptr, from) {}
  MapLayer(MapLayer&& from) noexcept
    : MapLayer() {
    *this = ::std::move(from);
  }

  inline MapLayer& operator=(const MapLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLayer& operator=(MapLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapLayer* internal_default_instance() {
    return reinterpret_cast<const MapLayer*>(
               &_MapLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapLayer& a, MapLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapLayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapLayer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapLayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapLayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MapLayer& from) {
    MapLayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MapLayer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MapLayer";
  }
  protected:
  explicit MapLayer(::google::protobuf::Arena* arena);
  MapLayer(::google::protobuf::Arena* arena, const MapLayer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 4,
    kUuidFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated int32 tiles = 4;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;

  public:
  void clear_tiles() ;
  ::int32_t tiles(int index) const;
  void set_tiles(int index, ::int32_t value);
  void add_tiles(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& tiles() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_tiles();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_tiles() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_tiles();

  public:
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // int32 width = 2;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 3;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MapLayer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      21, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> tiles_;
    mutable ::google::protobuf::internal::CachedSize _tiles_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::int32_t width_;
    ::int32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fagm_2eproto;
};// -------------------------------------------------------------------

class AGM final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AGM) */ {
 public:
  inline AGM() : AGM(nullptr) {}
  ~AGM() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AGM(::google::protobuf::internal::ConstantInitialized);

  inline AGM(const AGM& from)
      : AGM(nullptr, from) {}
  AGM(AGM&& from) noexcept
    : AGM() {
    *this = ::std::move(from);
  }

  inline AGM& operator=(const AGM& from) {
    CopyFrom(from);
    return *this;
  }
  inline AGM& operator=(AGM&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AGM& default_instance() {
    return *internal_default_instance();
  }
  static inline const AGM* internal_default_instance() {
    return reinterpret_cast<const AGM*>(
               &_AGM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AGM& a, AGM& b) {
    a.Swap(&b);
  }
  inline void Swap(AGM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AGM* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AGM* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AGM>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AGM& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AGM& from) {
    AGM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AGM* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "AGM";
  }
  protected:
  explicit AGM(::google::protobuf::Arena* arena);
  AGM(::google::protobuf::Arena* arena, const AGM& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileTypesFieldNumber = 2,
    kLayersFieldNumber = 5,
    kTitleFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // repeated .TileType tileTypes = 2;
  int tiletypes_size() const;
  private:
  int _internal_tiletypes_size() const;

  public:
  void clear_tiletypes() ;
  ::TileType* mutable_tiletypes(int index);
  ::google::protobuf::RepeatedPtrField< ::TileType >*
      mutable_tiletypes();
  private:
  const ::google::protobuf::RepeatedPtrField<::TileType>& _internal_tiletypes() const;
  ::google::protobuf::RepeatedPtrField<::TileType>* _internal_mutable_tiletypes();
  public:
  const ::TileType& tiletypes(int index) const;
  ::TileType* add_tiletypes();
  const ::google::protobuf::RepeatedPtrField< ::TileType >&
      tiletypes() const;
  // repeated .MapLayer layers = 5;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::MapLayer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::MapLayer >*
      mutable_layers();
  private:
  const ::google::protobuf::RepeatedPtrField<::MapLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::MapLayer>* _internal_mutable_layers();
  public:
  const ::MapLayer& layers(int index) const;
  ::MapLayer* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::MapLayer >&
      layers() const;
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // int32 width = 3;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 4;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:AGM)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      17, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::TileType > tiletypes_;
    ::google::protobuf::RepeatedPtrField< ::MapLayer > layers_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::int32_t width_;
    ::int32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fagm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TileType

// string uuid = 1;
inline void TileType::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& TileType::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TileType.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TileType::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TileType.uuid)
}
inline std::string* TileType::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TileType.uuid)
  return _s;
}
inline const std::string& TileType::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_.Get();
}
inline void TileType::_internal_set_uuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* TileType::_internal_mutable_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* TileType::release_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TileType.uuid)
  return _impl_.uuid_.Release();
}
inline void TileType::set_allocated_uuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uuid_.IsDefault()) {
          _impl_.uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TileType.uuid)
}

// string title = 2;
inline void TileType::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TileType::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TileType.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TileType::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TileType.title)
}
inline std::string* TileType::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:TileType.title)
  return _s;
}
inline const std::string& TileType::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void TileType::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* TileType::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* TileType::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TileType.title)
  return _impl_.title_.Release();
}
inline void TileType::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TileType.title)
}

// int32 graphicIndex = 3;
inline void TileType::clear_graphicindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.graphicindex_ = 0;
}
inline ::int32_t TileType::graphicindex() const {
  // @@protoc_insertion_point(field_get:TileType.graphicIndex)
  return _internal_graphicindex();
}
inline void TileType::set_graphicindex(::int32_t value) {
  _internal_set_graphicindex(value);
  // @@protoc_insertion_point(field_set:TileType.graphicIndex)
}
inline ::int32_t TileType::_internal_graphicindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.graphicindex_;
}
inline void TileType::_internal_set_graphicindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.graphicindex_ = value;
}

// bool solid = 4;
inline void TileType::clear_solid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solid_ = false;
}
inline bool TileType::solid() const {
  // @@protoc_insertion_point(field_get:TileType.solid)
  return _internal_solid();
}
inline void TileType::set_solid(bool value) {
  _internal_set_solid(value);
  // @@protoc_insertion_point(field_set:TileType.solid)
}
inline bool TileType::_internal_solid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solid_;
}
inline void TileType::_internal_set_solid(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solid_ = value;
}

// -------------------------------------------------------------------

// MapLayer

// string uuid = 1;
inline void MapLayer::clear_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& MapLayer::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MapLayer.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapLayer::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MapLayer.uuid)
}
inline std::string* MapLayer::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:MapLayer.uuid)
  return _s;
}
inline const std::string& MapLayer::_internal_uuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uuid_.Get();
}
inline void MapLayer::_internal_set_uuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* MapLayer::_internal_mutable_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* MapLayer::release_uuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MapLayer.uuid)
  return _impl_.uuid_.Release();
}
inline void MapLayer::set_allocated_uuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uuid_.IsDefault()) {
          _impl_.uuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapLayer.uuid)
}

// int32 width = 2;
inline void MapLayer::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
}
inline ::int32_t MapLayer::width() const {
  // @@protoc_insertion_point(field_get:MapLayer.width)
  return _internal_width();
}
inline void MapLayer::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:MapLayer.width)
}
inline ::int32_t MapLayer::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void MapLayer::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 3;
inline void MapLayer::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline ::int32_t MapLayer::height() const {
  // @@protoc_insertion_point(field_get:MapLayer.height)
  return _internal_height();
}
inline void MapLayer::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:MapLayer.height)
}
inline ::int32_t MapLayer::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void MapLayer::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// repeated int32 tiles = 4;
inline int MapLayer::_internal_tiles_size() const {
  return _internal_tiles().size();
}
inline int MapLayer::tiles_size() const {
  return _internal_tiles_size();
}
inline void MapLayer::clear_tiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tiles_.Clear();
}
inline ::int32_t MapLayer::tiles(int index) const {
  // @@protoc_insertion_point(field_get:MapLayer.tiles)
  return _internal_tiles().Get(index);
}
inline void MapLayer::set_tiles(int index, ::int32_t value) {
  _internal_mutable_tiles()->Set(index, value);
  // @@protoc_insertion_point(field_set:MapLayer.tiles)
}
inline void MapLayer::add_tiles(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tiles()->Add(value);
  // @@protoc_insertion_point(field_add:MapLayer.tiles)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MapLayer::tiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:MapLayer.tiles)
  return _internal_tiles();
}
inline ::google::protobuf::RepeatedField<::int32_t>* MapLayer::mutable_tiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:MapLayer.tiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tiles();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& MapLayer::_internal_tiles()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tiles_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* MapLayer::_internal_mutable_tiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tiles_;
}

// -------------------------------------------------------------------

// AGM

// string title = 1;
inline void AGM::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AGM::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AGM.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AGM::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AGM.title)
}
inline std::string* AGM::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:AGM.title)
  return _s;
}
inline const std::string& AGM::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void AGM::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* AGM::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* AGM::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:AGM.title)
  return _impl_.title_.Release();
}
inline void AGM::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AGM.title)
}

// repeated .TileType tileTypes = 2;
inline int AGM::_internal_tiletypes_size() const {
  return _internal_tiletypes().size();
}
inline int AGM::tiletypes_size() const {
  return _internal_tiletypes_size();
}
inline void AGM::clear_tiletypes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tiletypes_.Clear();
}
inline ::TileType* AGM::mutable_tiletypes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:AGM.tileTypes)
  return _internal_mutable_tiletypes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::TileType>* AGM::mutable_tiletypes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:AGM.tileTypes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tiletypes();
}
inline const ::TileType& AGM::tiletypes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AGM.tileTypes)
  return _internal_tiletypes().Get(index);
}
inline ::TileType* AGM::add_tiletypes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TileType* _add = _internal_mutable_tiletypes()->Add();
  // @@protoc_insertion_point(field_add:AGM.tileTypes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::TileType>& AGM::tiletypes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:AGM.tileTypes)
  return _internal_tiletypes();
}
inline const ::google::protobuf::RepeatedPtrField<::TileType>&
AGM::_internal_tiletypes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tiletypes_;
}
inline ::google::protobuf::RepeatedPtrField<::TileType>*
AGM::_internal_mutable_tiletypes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tiletypes_;
}

// int32 width = 3;
inline void AGM::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
}
inline ::int32_t AGM::width() const {
  // @@protoc_insertion_point(field_get:AGM.width)
  return _internal_width();
}
inline void AGM::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AGM.width)
}
inline ::int32_t AGM::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void AGM::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 4;
inline void AGM::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline ::int32_t AGM::height() const {
  // @@protoc_insertion_point(field_get:AGM.height)
  return _internal_height();
}
inline void AGM::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AGM.height)
}
inline ::int32_t AGM::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void AGM::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// repeated .MapLayer layers = 5;
inline int AGM::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int AGM::layers_size() const {
  return _internal_layers_size();
}
inline void AGM::clear_layers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.layers_.Clear();
}
inline ::MapLayer* AGM::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:AGM.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::MapLayer>* AGM::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:AGM.layers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_layers();
}
inline const ::MapLayer& AGM::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AGM.layers)
  return _internal_layers().Get(index);
}
inline ::MapLayer* AGM::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::MapLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:AGM.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::MapLayer>& AGM::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:AGM.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::MapLayer>&
AGM::_internal_layers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::MapLayer>*
AGM::_internal_mutable_layers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.layers_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fagm_2eproto_2epb_2eh
