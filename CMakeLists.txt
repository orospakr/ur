cmake_minimum_required(VERSION 3.10)
project(ur VERSION 0.1.0)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Define the executable
add_executable(ur src/ur.cpp src/audio/audio.cpp src/game/map.cpp src/game/object.cpp src/ui/menu.cpp src/ui/titlescreen.cpp src/graphics/font.cpp src/graphics/layer.cpp src/graphics/sprite.cpp)

# SDL:
find_package(SDL2 REQUIRED)
if(SDL2_FOUND)
    message(STATUS "SDL2_INCLUDE_DIRS = ${SDL2_INCLUDE_DIRS}")
    message(STATUS "SDL2_LIBRARIES = ${SDL2_LIBRARIES}")
    target_link_libraries(ur SDL2::SDL2)
else()
    message(FATAL_ERROR "SDL2 not found")
endif()

# SDL_image:
find_package(SDL2_image REQUIRED)
if(SDL2_image_FOUND )
    target_link_libraries(ur SDL2_image::SDL2_image)
else()
    message(FATAL_ERROR "SDL2_image not found")
endif()

# So, finding libopenmpt has to be done differently on Unix vs Windows/vcpkg.
# Upstream libopenmpt does not have a .cmake file, and only offers a pkg-config
# .pc file. However, pkg-config doesn't work well on windows, but interestingly
# when using vcpkg (as one does by default on Windows), a cmake package appears
# to be generated by the libopenmpt vcpkg recipe. So, we can use that if it's
# available, and fall back to pkg-config if now.

# Perhaps upstream will adopt a cmake package someday anyway so trying
# a cmake package first anyway is probably a good idea.

# First, try to find the cmake package:
find_package(libopenmpt CONFIG)

if(libopenmpt_FOUND)
   # it was found with cmake package, so use it:
   target_link_libraries(ur libopenmpt::libopenmpt)
else()
    # Use pkg-config in lieu of cmake package:
    message(STATUS "libopenmpt cmake package not found, trying pkg-config")
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(OPENMPT REQUIRED IMPORTED_TARGET libopenmpt)
    
    if(NOT OPENMPT_FOUND)
        message(FATAL_ERROR "libopenmpt not found using either cmake package or pkg-config")
    endif()

    target_link_libraries(ur PkgConfig::OPENMPT)
endif()

# Include directories
include_directories(src src/audio src/graphics src/ui)

# Add subdirectory
add_subdirectory(src)

# Link libraries
target_link_libraries(ur)

# Compiler flags
target_compile_options(ur PRIVATE -Wall)

# Game data
file(COPY data DESTINATION ${CMAKE_BINARY_DIR})
